#!/usr/bin/env python3
# test_components.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

import os
import sys
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from preprocessing.classify_attachment import classify_attachment
        print("‚úÖ preprocessing.classify_attachment")
    except ImportError as e:
        print(f"‚ùå preprocessing.classify_attachment: {e}")
        return False
    
    try:
        from ingestion.extract_text_universal import extract_text_from_file
        print("‚úÖ ingestion.extract_text_universal")
    except ImportError as e:
        print(f"‚ùå ingestion.extract_text_universal: {e}")
        return False
    
    try:
        from llm.gpt_analyzer import extract_key_clauses, extract_goods_table
        print("‚úÖ llm.gpt_analyzer")
    except ImportError as e:
        print(f"‚ùå llm.gpt_analyzer: {e}")
        return False
    
    try:
        from bitrix24.bitrix_sender import send_to_bitrix24
        print("‚úÖ bitrix24.bitrix_sender")
    except ImportError as e:
        print(f"‚ùå bitrix24.bitrix_sender: {e}")
        return False
    
    try:
        from main.handle_email_request import handle_email_request
        print("‚úÖ main.handle_email_request")
    except ImportError as e:
        print(f"‚ùå main.handle_email_request: {e}")
        return False
    
    try:
        from email_reader import fetch_attachments
        print("‚úÖ email_reader")
    except ImportError as e:
        print(f"‚ùå email_reader: {e}")
        return False
    
    return True

def test_classification():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        from preprocessing.classify_attachment import classify_attachment
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            ("–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É –û–û–û –∏ –ò–ü", "contract.pdf", "–¥–æ–≥–æ–≤–æ—Ä"),
            ("–ò–∑–≤–µ—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫", "notice.docx", "–∏–∑–≤–µ—â–µ–Ω–∏–µ"),
            ("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É", "tech_spec.xlsx", "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"),
            ("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", "document.txt", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        ]
        
        for text, filename, expected in test_cases:
            result = classify_attachment(text, filename)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {filename}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def test_text_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
    
    try:
        from ingestion.extract_text_universal import extract_text_from_file
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = Path("test_file.txt")
        test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."
        
        test_file.write_text(test_content, encoding='utf-8')
        
        extracted = extract_text_from_file(str(test_file))
        
        if extracted.strip() == test_content:
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT —Ñ–∞–π–ª–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT —Ñ–∞–π–ª–∞")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file.unlink()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return False

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        required_vars = [
            "EMAIL_HOST",
            "EMAIL_LOGIN", 
            "EMAIL_PASSWORD",
            "OPENAI_API_KEY",
            "BITRIX_WEBHOOK"
        ]
        
        missing_vars = []
        for var in required_vars:
            value = os.getenv(var)
            if not value:
                missing_vars.append(var)
                print(f"‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                masked_value = value[:3] + "***" + value[-3:] if len(value) > 6 else "***"
                print(f"‚úÖ {var}: {masked_value}")
        
        if missing_vars:
            print(f"\n‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def test_directories():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = ["temp_files", "output"]
    
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            print(f"‚úÖ {dir_name}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ö†Ô∏è {dir_name}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é...")
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ {dir_name}: —Å–æ–∑–¥–∞–Ω–∞")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Contract Parser Extended")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_classification),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", test_text_extraction),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", test_directories)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return 1

if __name__ == "__main__":
    sys.exit(main())