#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ contract_parser_extended
"""

import os
import json
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from preprocessing.classify_attachment import classify_attachment
from ingestion.extract_text_universal import extract_text_from_file
from llm.gpt_analyzer import extract_key_clauses, extract_goods_table
from main.handle_email_request import handle_email_request

def create_test_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    test_dir = Path("temp_files")
    test_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä
    contract_content = """
    –î–û–ì–û–í–û–† –ü–û–°–¢–ê–í–ö–ò ‚Ññ 123/2024
    
    –ü–æ—Å—Ç–∞–≤—â–∏–∫: –û–û–û "–¢–µ—Å—Ç –ü–æ—Å—Ç–∞–≤—â–∏–∫"
    –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–û–û "–¢–µ—Å—Ç –ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    
    –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞: –ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: 1 000 000 —Ä—É–±–ª–µ–π
    –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: –¥–æ 31.12.2024
    
    –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
    """
    
    contract_file = test_dir / "test_contract.txt"
    with open(contract_file, 'w', encoding='utf-8') as f:
        f.write(contract_content)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–≤–µ—â–µ–Ω–∏–µ
    notice_content = """
    –ò–ó–í–ï–©–ï–ù–ò–ï –û –ü–†–û–í–ï–î–ï–ù–ò–ò –¢–ï–ù–î–ï–†–ê ‚Ññ 456/2024
    
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ
    –ü—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø–∫–∏: –ü–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500 000 —Ä—É–±–ª–µ–π
    –°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: –¥–æ 15.01.2025
    """
    
    notice_file = test_dir / "test_notice.txt"
    with open(notice_file, 'w', encoding='utf-8') as f:
        f.write(notice_content)
    
    return [str(contract_file), str(notice_file)]

def demo_classification():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("=" * 60)
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    test_files = create_test_files()
    
    for file_path in test_files:
        filename = os.path.basename(file_path)
        text = extract_text_from_file(file_path)
        classification = classify_attachment(text, filename)
        
        print(f"üìÑ –§–∞–π–ª: {filename}")
        print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {text[:100]}...")
        print(f"üè∑Ô∏è  –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification}")
        print("-" * 40)

def demo_text_extraction():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    print("=" * 60)
    print("üìñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê")
    print("=" * 60)
    
    test_files = create_test_files()
    
    for file_path in test_files:
        filename = os.path.basename(file_path)
        text = extract_text_from_file(file_path)
        
        print(f"üìÑ –§–∞–π–ª: {filename}")
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(text)
        print("-" * 40)

def demo_full_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("=" * 60)
    print("‚öôÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 60)
    
    test_files = create_test_files()
    
    for file_path in test_files:
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
            result = handle_email_request([file_path])
            
            if result:
                print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                print(json.dumps(result, ensure_ascii=False, indent=2))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                output_file = "output/email_parsed.json"
                if os.path.exists(output_file):
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 40)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CONTRACT_PARSER_EXTENDED")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_name in ["temp_files", "output", "logs"]:
        Path(dir_name).mkdir(exist_ok=True)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        demo_classification()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        demo_text_extraction()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        demo_full_pipeline()
        
        print("=" * 60)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()